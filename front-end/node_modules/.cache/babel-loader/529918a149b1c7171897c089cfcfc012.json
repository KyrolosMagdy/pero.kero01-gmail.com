{"ast":null,"code":"var _jsxFileName = \"E:\\\\javascript\\\\formvalidation\\\\front-end\\\\src\\\\components\\\\table-wrapper\\\\table-wrapper.component.jsx\";\nimport React, { Fragment } from 'react';\nimport Message from '../feed/feedPost/feedPost.component';\nimport Button from '../button/button.component';\nimport ErrorHandler from '../ErrorHandler/ErrorHandler.component';\nimport Paginator from '../Paginator/Paginator.component';\nimport Loader from '../Loader/Loader';\n\nclass TableWrapper extends React.Component {\n  constructor(props) {\n    super(props); //since we are extending class Table so we have to use super in order to override Component class constructor\n\n    this.loadMessages = direction => {\n      if (direction) {\n        this.setState({\n          messagesLoading: true,\n          messages: []\n        });\n      }\n\n      let page = this.state.messagePage;\n\n      if (direction === 'next') {\n        page++;\n        this.setState({\n          messagePage: page\n        });\n      }\n\n      if (direction === 'previous') {\n        page--;\n        this.setState({\n          messagePage: page\n        });\n      }\n\n      fetch('http://localhost:3001/feed/messages').then(res => {\n        if (res.status !== 200) {\n          throw new Error('Failed to fetch messages.');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState({\n          messages: resData.messages,\n          totalMessages: resData.totalItems,\n          messageLoading: false\n        });\n      }).catch(this.catchError);\n    };\n\n    this.errorHandler = () => {\n      this.setState({\n        error: null\n      });\n    };\n\n    this.state = {\n      //state is by default an object\n      isEditing: false,\n      posts: [],\n      totalPosts: 0,\n      editPost: null,\n      status: '',\n      postPage: 1,\n      postsLoading: true,\n      editLoading: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3001/feed/messages').then(res => {\n      if (res.status !== 200) {\n        throw new Error('Failed to fetch user status.');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.setState({\n        status: resData.status\n      });\n    }).catch(this.catchError);\n    this.loadMessages();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(ErrorHandler, {\n      error: this.state.error,\n      onHandle: this.errorHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"feed__status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.statusUpdateHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Button, {\n      mode: \"flat\",\n      type: \"submit\",\n      buttonContent: 'Update',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(\"section\", {\n      className: \"feed__control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Button, {\n      mode: \"raised\",\n      design: \"accent\",\n      onClick: this.newPostHandler,\n      buttonContent: 'New Post',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"section\", {\n      className: \"feed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.postsLoading && React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '2rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), this.state.posts.length <= 0 && !this.state.postsLoading ? React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"No posts found.\") : null, !this.state.postsLoading && React.createElement(Paginator, {\n      onPrevious: this.loadPosts.bind(this, 'previous'),\n      onNext: this.loadPosts.bind(this, 'next'),\n      lastPage: Math.ceil(this.state.totalPosts / 2),\n      currentPage: this.state.postPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.posts.map(post => React.createElement(Message, {\n      key: post._id,\n      id: post._id,\n      author: post.creator.name,\n      date: new Date(post.createdAt).toLocaleDateString('en-US'),\n      title: post.title,\n      image: post.imageUrl,\n      content: post.content,\n      onStartEdit: this.startEditPostHandler.bind(this, post._id),\n      onDelete: this.deletePostHandler.bind(this, post._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default TableWrapper;","map":{"version":3,"sources":["E:/javascript/formvalidation/front-end/src/components/table-wrapper/table-wrapper.component.jsx"],"names":["React","Fragment","Message","Button","ErrorHandler","Paginator","Loader","TableWrapper","Component","constructor","props","loadMessages","direction","setState","messagesLoading","messages","page","state","messagePage","fetch","then","res","status","Error","json","resData","totalMessages","totalItems","messageLoading","catch","catchError","errorHandler","error","isEditing","posts","totalPosts","editPost","postPage","postsLoading","editLoading","componentDidMount","render","statusUpdateHandler","newPostHandler","textAlign","marginTop","length","loadPosts","bind","Math","ceil","map","post","_id","creator","name","Date","createdAt","toLocaleDateString","title","imageUrl","content","startEditPostHandler","deletePostHandler"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport Message from '../feed/feedPost/feedPost.component';\r\nimport Button from '../button/button.component';\r\nimport ErrorHandler from '../ErrorHandler/ErrorHandler.component';\r\nimport Paginator from '../Paginator/Paginator.component';\r\nimport Loader from '../Loader/Loader';\r\n\r\n\r\nclass TableWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props) //since we are extending class Table so we have to use super in order to override Component class constructor\r\n        this.state = { //state is by default an object\r\n            isEditing: false,\r\n            posts: [],\r\n            totalPosts: 0,\r\n            editPost: null,\r\n            status: '',\r\n            postPage: 1,\r\n            postsLoading: true,\r\n            editLoading: false\r\n        }\r\n    };\r\n\r\n    \r\n    componentDidMount() {\r\n        fetch('http://localhost:3001/feed/messages')\r\n          .then(res => {\r\n            if (res.status !== 200) {\r\n              throw new Error('Failed to fetch user status.');\r\n            }\r\n            return res.json();\r\n          })\r\n          .then(resData => {\r\n            this.setState({ status: resData.status });\r\n          })\r\n          .catch(this.catchError);\r\n    \r\n        this.loadMessages();\r\n      }\r\n    \r\n      loadMessages = direction => {\r\n        if (direction) {\r\n          this.setState({ messagesLoading: true, messages: [] });\r\n        }\r\n        let page = this.state.messagePage;\r\n        if (direction === 'next') {\r\n          page++;\r\n          this.setState({ messagePage: page });\r\n        }\r\n        if (direction === 'previous') {\r\n          page--;\r\n          this.setState({ messagePage: page });\r\n        }\r\n        fetch('http://localhost:3001/feed/messages')\r\n          .then(res => {\r\n            if (res.status !== 200) {\r\n              throw new Error('Failed to fetch messages.');\r\n            }\r\n            return res.json();\r\n          })\r\n          .then(resData => {\r\n            this.setState({\r\n                messages: resData.messages,\r\n                totalMessages: resData.totalItems,\r\n                messageLoading: false\r\n            });\r\n          })\r\n          .catch(this.catchError);\r\n      };\r\n\r\n    errorHandler = () => {\r\n        this.setState({ error: null });\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\r\n                <section className=\"feed__status\">\r\n                    <form onSubmit={this.statusUpdateHandler}>\r\n                        <Button mode=\"flat\" type=\"submit\" buttonContent={'Update'} />      \r\n                    </form>\r\n                </section>\r\n                <section className=\"feed__control\">\r\n                    <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler} buttonContent={'New Post'} />     \r\n                </section>\r\n                <section className=\"feed\">\r\n                    {this.state.postsLoading && (\r\n                        <div style={{ textAlign: 'center', marginTop: '2rem' }}>\r\n                            <Loader />\r\n                        </div>\r\n                    )}\r\n                    {this.state.posts.length <= 0 && !this.state.postsLoading ? (\r\n                        <p style={{ textAlign: 'center' }}>No posts found.</p>\r\n                    ) : null}\r\n                    {!this.state.postsLoading && (\r\n                        <Paginator\r\n                            onPrevious={this.loadPosts.bind(this, 'previous')}\r\n                            onNext={this.loadPosts.bind(this, 'next')}\r\n                            lastPage={Math.ceil(this.state.totalPosts / 2)}\r\n                            currentPage={this.state.postPage}\r\n                        >\r\n                            {this.state.posts.map(post => (\r\n                                <Message\r\n                                    key={post._id}\r\n                                    id={post._id}\r\n                                    author={post.creator.name}\r\n                                    date={new Date(post.createdAt).toLocaleDateString('en-US')}\r\n                                    title={post.title}\r\n                                    image={post.imageUrl}\r\n                                    content={post.content}\r\n                                    onStartEdit={this.startEditPostHandler.bind(this, post._id)}\r\n                                    onDelete={this.deletePostHandler.bind(this, post._id)}\r\n                                />\r\n                            ))}\r\n                        </Paginator>\r\n                    )}\r\n                </section>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableWrapper;"]},"metadata":{},"sourceType":"module"}